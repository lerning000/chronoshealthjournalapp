# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip
require_relative '../node_modules/react-native/scripts/react_native_pods'

platform :ios, min_ios_version_supported
prepare_react_native_project!

# use_frameworks! :linkage => :static  # Disabled for better RN compatibility

target 'ChronosApp' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => false,
    :new_arch_enabled => false
  )

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      :mac_catalyst_enabled => false
    )
    
    # Disable user script sandboxing for all Pods targets (fixes Xcode 15+ sandbox errors)
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
      end
    end
    installer.pods_project.save
    
    # Apply all custom build settings AFTER react_native_post_install to prevent overrides
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Set minimum iOS deployment target
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
        
        # Force JSC instead of Hermes
        config.build_settings['USE_HERMES'] = 'NO'
        config.build_settings['USE_JSC'] = 'YES'
        
        # Remove Hermes framework from linker flags
        if config.build_settings['OTHER_LDFLAGS']
          if config.build_settings['OTHER_LDFLAGS'].is_a?(String)
            config.build_settings['OTHER_LDFLAGS'] = config.build_settings['OTHER_LDFLAGS'].gsub('-framework "hermes"', '').gsub('-framework hermes', '')
          elsif config.build_settings['OTHER_LDFLAGS'].is_a?(Array)
            config.build_settings['OTHER_LDFLAGS'] = config.build_settings['OTHER_LDFLAGS'].map do |flag|
              flag.to_s.gsub('-framework "hermes"', '').gsub('-framework hermes', '')
            end
          end
        end
        
        # Keep C++20 for React Native 0.81.4 compatibility (required for FuseboxTracer.cpp)
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++20'
        config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu11'
        
        # Set the C++ standard library
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        
        # Disable New Architecture (Fabric and TurboModules)
        # Note: Don't define RCT_NEW_ARCH_ENABLED at all, because #ifdef checks if it's defined
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        # Remove any RCT_NEW_ARCH_ENABLED definitions that might have been added
        if config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].is_a?(Array)
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].reject { |item| item.to_s.include?('RCT_NEW_ARCH_ENABLED') }
        end
        
        # Remove any Hermes-related compiler flags
        if config.build_settings['GCC_PREPROCESSOR_DEFINITIONS']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].reject { |item| item.include?('USE_HERMES') }
        end
        
        # Additional settings for compatibility
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
        config.build_settings['GCC_WARN_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
      end
    end
    
    # Remove Hermes framework from Embed Frameworks phase
    installer.aggregate_targets.each do |aggregate_target|
      aggregate_target.user_project.targets.each do |target|
        target.build_phases.each do |build_phase|
          if build_phase.respond_to?(:name) && build_phase.name == '[CP] Embed Pods Frameworks'
            build_phase.shell_script.gsub!(/.*hermes\.framework.*\n/, '')
          end
        end
      end
      aggregate_target.user_project.save
    end
    
    # Also update the main app project to disable New Architecture and user script sandboxing
    installer.aggregate_targets.each do |aggregate_target|
      aggregate_target.user_project.targets.each do |target|
        target.build_configurations.each do |config|
          # Disable user script sandboxing for app targets
          config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
          
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          # Remove RCT_NEW_ARCH_ENABLED completely (don't set it to 0, just remove it)
          if config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].is_a?(Array)
            config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].reject { |item| item.to_s.include?('RCT_NEW_ARCH_ENABLED') }
          end
          config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++20'
          config.build_settings['USE_HERMES'] = 'NO'
        end
      end
      aggregate_target.user_project.save
    end
    
    # Fix codegen symbolic links after generation
    system("cd #{Pod::Config.instance.installation_root}/.. && node scripts/fix-codegen-links.js")
    
    # Remove Hermes framework from generated xcconfig files (must be done after config generation)
    Dir.glob("#{Pod::Config.instance.installation_root}/Target Support Files/**/*.xcconfig").each do |config_file|
      xcconfig_content = File.read(config_file)
      xcconfig_content.gsub!(/-framework "hermes"/, '')
      xcconfig_content.gsub!(/-framework hermes/, '')
      File.write(config_file, xcconfig_content)
    end
  end
end
