# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip
require_relative '../node_modules/react-native/scripts/react_native_pods'

platform :ios, min_ios_version_supported
prepare_react_native_project!

# use_frameworks! :linkage => :static  # Disabled for better RN compatibility

target 'ChronosApp' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => false,
    :fabric_enabled => false,
    :new_arch_enabled => false
  )

  post_install do |installer|
    # Keep RN's usual tweaks:
    react_native_post_install(
      installer,
      # leave as-is if you already have this helper available:
      mac_catalyst_enabled: false
    )

    installer.pods_project.targets.each do |t|
      t.build_configurations.each do |config|
        # 1) Explicitly disable Hermes / enable JSC
        config.build_settings['USE_HERMES'] = 'NO'
        config.build_settings['USE_JSC']    = 'YES'

        # 2) Force the C/C++ macros so #if USE_HERMES evaluates to 0
        defs = config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] || ['$(inherited)']
        defs = defs.is_a?(Array) ? defs : defs.to_s.split(' ')
        defs << 'USE_HERMES=0' unless defs.any? { |d| d.include?('USE_HERMES=0') }
        defs << 'USE_JSC=1'   unless defs.any? { |d| d.include?('USE_JSC=1') }
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = defs

        # 3) Remove any Hermes header search paths that might still be cached
        hsp = config.build_settings['HEADER_SEARCH_PATHS'] || ['$(inherited)']
        hsp = hsp.is_a?(Array) ? hsp : hsp.to_s.split(' ')
        hsp.reject! { |p| p.to_s.downcase.include?('hermes') }
        config.build_settings['HEADER_SEARCH_PATHS'] = hsp
      end
    end
  end
end
